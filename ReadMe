The Greeting Kata

Requirement 1
Write a method greet(name) that interpolates name in a simple greeting.
For example, when name is "Bob", the method should return a string "Hello, Bob.".

Requirement 2
Handle nulls by introducing a stand-in. For example, when name is null,
then the method should return the string "Hello, my friend."

Requirement 3
Handle shouting. When name is all uppercase, then the method should shout back to the user.
For example, when name is "JERRY" then the method should return the string "HELLO JERRY!"

Requirement 4
Handle two names of input. When name is an array of two names (or, in languages that support it, varargs or a splat),
then both names should be printed. For example, when name is ["Jill", "Jane"], then the method should return
the string "Hello, Jill and Jane."

Requirement 5
Handle an arbitrary number of names as input. When name represents more than two names,
separate them with commas and close with an Oxford comma and "and". For example, when name is ["Amy", "Brian",
"Charlotte"], then the method should return the string "Hello, Amy, Brian, and Charlotte."

Requirement 6
Allow mixing of normal and shouted names by separating the response into two greetings. For example,
when name is ["Amy", "BRIAN", "Charlotte"], then the method should return the string "Hello, Amy and Charlotte.
AND HELLO BRIAN!"

Requirement 7
If any entries in name are a string containing a comma, split it as its own input.
For example, when name is ["Bob", "Charlie, Dianne"], then the method should return the string "Hello, Bob, Charlie,
and Dianne.".

Requirement 8
Allow the input to escape intentional commas introduced by Requirement 7. These can be escaped in the same manner
that CSV is, with double quotes surrounding the entry. For example, when name is ["Bob", ""Charlie, Dianne""],
then the method should return the string "Hello, Bob and Charlie, Dianne.".


The StringKata Kata


1.  The method can take 0, 1 or 2 numbers, and will return their sum  (for an empty string it will return 0)
for example “” == 0 ,    “1” == 1 ,  “1,2” == 3
Start with the simplest test case of an empty string and move to one & two
numbers. Remember to solve things as simply as possible so that you force yourself to
write tests you did not think about 4.  Remember to refactor after each passing test

2.  Allow the Add method to handle an unknown amount of numbers

3.  Allow the Add method to handle new lines between numbers (instead of commas).
the following input is ok:  “1\n2,3”  == 6
the following is INVALID input so do not expect it :  “1,\n” (not need to write a
test for it)

4.  Support different delimiters:   to change a delimiter, the beginning of the string will contain a separate line
that looks like this:
“//[delimiter]\n[numbers...]”
for example
“//;\n1;2” == 3
since the default delimiter is ‘;’ .

Note: All existing scenarios and tests should still be supported

5.  Calling Add with a negative number will throw an exception “negatives not allowed” -
and the negative that was passed.

6.  If there are multiple negatives, show all of them in the exception message

7.  Using TDD, Add a method  to StringCalculator
called public int GetCalledCount()
that returns how many times Add() was invoked.
Remember - Start with a failing (or even non compiling) test.

8.  (.NET Only) Using TDD, Add an event to the StringCalculator class named
public event Action<string, int> AddOccured ,
that is triggered after every Add() call.

9.  Numbers bigger than 1000 should be ignored,  for example:  2 + 1001 == 2

10. Delimiters can be of any length with the following format:   “//[delimiter]\n”
for example:
“//[***]\n1***2***3” == 6

11. Allow multiple delimiters like this:   “//[delim1][delim2]\n”
for example
“//[*][%]\n1*2%3” == 6.

12. make sure you can also handle multiple delimiters with length longer than one char  for example
“//[**][%%]\n1**2%%3” == 6.
